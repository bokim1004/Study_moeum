### 브라우저 동작원리

브라우저의 핵심 기능은 사용자가 참조하고자 하는 웹페이지를 서버에 요청하고
서버에 응답을 받아 브라우저에 표시하는 것 브라우저는 서버로부터
HTML,CSS,JS,이미지 파일등을 응답받는다. HTML,CSS파일은 렌더링 엔진의
HTML파서와 CSS파서에 의해 파싱되어 DOM,CSSOM 트리로 변환되고 렌더트리로
결합된다. 이렇게 생성된 렌더트리를 기반으로 브라우저는 웹페이지를 표시한다.
JS는 렌더링 엔진이 아닌 자바스크립트 엔진이 처리한다. HTML파서는 script태그를
만나면 자바스크립트 코드를 실해앟기 위해 DOM생성 프로세스를 중지하고
자바스크립트 엔진으로 제어 권한을 넘긴다. 제어권한을 넘겨받은 자바스크립트
엔진은 script태그 내의 자바스크립트 코드 또는 script태그의 src attribute에
정의된 자바스크립트 파일을 로드 파씽하여 실행한다. 자바스크립트 실행이
완료되면 다시 HTML 파서로 제어권한을 넘겨서 브라우저가 중지했떤 시점부터
DOM생성을 재개한다.

이처럼 브라우저는 동기적으로 HTML,CSS,JS를 처리한다.이는 script태그 위치에
따라 블로킹이 발생하여 DOM생성이 지연될 수 있다는 것을 의미한다. body요소의
가장 아래에 자바스크립트를 위치시키는 것이 좋다/

## 왜??

HTML요소들이 스크립트 로딩 지연으로 인해 렌더링에 지장받는 일이 발생하지 않아 페이지 로딩 시간이
단축된다. DOM이 완성되지 않은 상태에서 자바스크립트가 DOM을 조작한다면 에러가
발생한다

## URL을 입력했을 때 어떤식으로 동작하게 되나요?

`브라우저에 maps.google.com을 입력하면 어떤 일이 벌어지나요?`

1. 브라우저 주소창에 maps.google.com을 입력한다.
2. 브라우저가 maps.google.com의 IP주소를 찾기 위해 캐시에서 DNS기록을 확인한다.

   DNS(Domain Name System)는 인터넷 전화번호부와 같다. DNS는 웹 사이트의 IP주소와 도메인 주소를 연결해주는 시스템이다. 인터넷의 모든 URL에는 고유한 IP주소가 할당되어 있으며, IP주소는 액세스 요청 웹사이트의 서버를 호스트하는 컴퓨터에 속한다.

   DNS의 주요 목적은 사람들이 쉽게 사이트 주소를 찾을 수 있도록 도와주는 것이다.
   만약 DNS가 없다면 google.com과 같이 도메인 주소가 아닌 142.250.196.110라는 ip주소를 하나하나 외워서 사이트에 접속할 수 있다.

   모든 사이트를 IP주소로만 접속해야 한다면 정말 어려울 것이다. 이를 해결하기 위해 DNS를 이용한다. DNS가 자동으로 URL과 IP주소를 매핑해주기에 쉽게 원하는 사이트에 접속할 수 있다.

3. 만약 요청한 URL이 캐시에 없다면, ISP의 DNS서버가 DNS쿼리로 maps.google.com을
   호스팅하는 서버의 IP주소를 찾는다.
4. 브라우저가 해당 서버와 TCP연결을 시작한다.

브라우저가 올바른 IP주소를 수신하면 IP주소와 일치하는 서버와 연결해 정보를 전송한다.
브라우저는 인터넷 프로토콜을 사용하여 이러한 연결을 구축한다. 사용할 수 있는 여러가지 인터넷
프로토콜이 있지만, 일반적으로 HTTP요청에서는 TCP(transmission control protocol)라는
전송 제어 프로토콜을 사용한다.

5. 브라우저가 웹서버에 HTTP요청을 보낸다.

   TCP연결이 설정되면 데이터 전송이 시작된다. 브라우저는 maps.google.com 웹 페이지를 요청하는 GET요청을 보낼 것이다.

6. 서버가 요청을 처리하고 응답을 보낸다.
7. 서버가 HTTP응답을 보낸다.
8. 브라우저가 HTML컨텐츠를 보여준다.

> 정리: 브라우저 주소창에 URL을 입력하면 브라우저는 DNS를 운영하는 서버를 통해 IP주소를 받아온다. 브라우저는 IP주소를 이용해서 서버에 요청을 보낸다. 서버는 요청에 대한 응답을 보내준다.
> 브라우저는 응답결과를 렌더링한다.
